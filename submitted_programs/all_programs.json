[
    [
        "Santiago Avila",
        "Le ped\u00ed a la IA que generara un paisaje de un r\u00edo en el medio de una monta\u00f1a usando matplotlib. Y me di\u00f3 lo siguiente:",
        "import matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.patches import Polygon\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\n\r\n# Dibujar el cielo\r\nax.fill_between([0, 10], [10, 10], [0, 0], color='skyblue', zorder=1)\r\n\r\n# Dibujar las monta\u00f1as\r\ny_montana1 = [3, 5, 4, 2, 0]\r\nx_montana1 = [0, 2, 4, 6, 8]\r\nax.fill_between(x_montana1, y_montana1, 0, color='darkgreen', zorder=2)\r\n\r\ny_montana2 = [4, 6, 5, 3, 0]\r\nx_montana2 = [2, 4, 6, 8, 10]\r\nax.fill_between(x_montana2, y_montana2, 0, color='forestgreen', zorder=2)\r\n\r\n\r\n# Dibujar el r\u00edo\r\ny_rio = np.linspace(1, 1.5, 10)\r\nx_rio = np.linspace(0, 10, 10)\r\nax.plot(x_rio, y_rio, color='blue', linewidth=3, zorder=3)\r\n\r\n# Dibujar algunos \u00e1rboles\r\nfor x in [1, 3, 5, 7, 9]:\r\n    polygon = Polygon([[x, 2], [x - 0.5, 3], [x + 0.5, 3]], color='darkgreen')\r\n    ax.add_patch(polygon)\r\n\r\n# Ajustar los l\u00edmites de los ejes\r\nax.set_xlim(0, 10)\r\nax.set_ylim(0, 10)\r\n\r\n# Remover los ejes para mejorar la visualizaci\u00f3n\r\nax.axis('off')\r\n\r\n# Mostrar el paisaje\r\nplt.show()"
    ],
    {
        "name": "Santiago Avila",
        "description": "Le ped\u00ed a la IA que generara un paisaje de un r\u00edo en el medio de una monta\u00f1a usando matplotlib. Y me di\u00f3 lo siguiente:",
        "code": "import matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.patches import Polygon\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\n\r\n# Dibujar el cielo\r\nax.fill_between([0, 10], [10, 10], [0, 0], color='skyblue', zorder=1)\r\n\r\n# Dibujar las monta\u00f1as\r\ny_montana1 = [3, 5, 4, 2, 0]\r\nx_montana1 = [0, 2, 4, 6, 8]\r\nax.fill_between(x_montana1, y_montana1, 0, color='darkgreen', zorder=2)\r\n\r\ny_montana2 = [4, 6, 5, 3, 0]\r\nx_montana2 = [2, 4, 6, 8, 10]\r\nax.fill_between(x_montana2, y_montana2, 0, color='forestgreen', zorder=2)\r\n\r\n\r\n# Dibujar el r\u00edo\r\ny_rio = np.linspace(1, 1.5, 10)\r\nx_rio = np.linspace(0, 10, 10)\r\nax.plot(x_rio, y_rio, color='blue', linewidth=3, zorder=3)\r\n\r\n# Dibujar algunos \u00e1rboles\r\nfor x in [1, 3, 5, 7, 9]:\r\n    polygon = Polygon([[x, 2], [x - 0.5, 3], [x + 0.5, 3]], color='darkgreen')\r\n    ax.add_patch(polygon)\r\n\r\n# Ajustar los l\u00edmites de los ejes\r\nax.set_xlim(0, 10)\r\nax.set_ylim(0, 10)\r\n\r\n# Remover los ejes para mejorar la visualizaci\u00f3n\r\nax.axis('off')\r\n\r\n# Mostrar el paisaje\r\nplt.show()",
        "timestamp": "20241015_233846"
    }
][
    [
        "Juliana Gonzalez ",
        "Generar un codigo de python a traves de chatgpt para realizar un dibujo",
        "#Realiza un codigo de python, y dibuja un perro jugando hockey usando matplotlib \r\n\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.patches import Circle, Rectangle, Ellipse, FancyBboxPatch\r\nimport numpy as np\r\n\r\n# Clase Perro\r\nclass Perro:\r\n    def __init__(self, x, y, scale, color_cuerpo, color_orejas, color_cola):\r\n        self.x = x\r\n        self.y = y\r\n        self.scale = scale\r\n        self.color_cuerpo = color_cuerpo\r\n        self.color_orejas = color_orejas\r\n        self.color_cola = color_cola\r\n\r\n    def dibujar(self, ax):\r\n        # Cuerpo del perro (elipse)\r\n        ax.add_patch(Ellipse((self.x, self.y),\r\n                             self.scale * 2.5, self.scale,\r\n                             color=self.color_cuerpo, zorder=10))\r\n\r\n        # Cabeza (c\u00edrculo)\r\n        ax.add_patch(Circle((self.x - self.scale * 1.4, self.y + self.scale * 0.3),\r\n                            self.scale * 0.6, color=self.color_cuerpo, zorder=11))\r\n\r\n        # Orejas (peque\u00f1os rect\u00e1ngulos)\r\n        ax.add_patch(Rectangle((self.x - self.scale * 1.8, self.y + self.scale * 0.8),\r\n                               self.scale * 0.2, self.scale * 0.4,\r\n                               color=self.color_orejas, zorder=12))\r\n        ax.add_patch(Rectangle((self.x - self.scale * 1.0, self.y + self.scale * 0.8),\r\n                               self.scale * 0.2, self.scale * 0.4,\r\n                               color=self.color_orejas, zorder=12))\r\n\r\n        # Patas (rect\u00e1ngulos)\r\n        for i in range(-1, 3, 2):\r\n            ax.add_patch(Rectangle((self.x + i * self.scale * 0.5, self.y - self.scale),\r\n                                   self.scale * 0.3, self.scale * 0.5, color=self.color_cuerpo, zorder=10))\r\n\r\n        # Cola (curva)\r\n        x_cola = [self.x + self.scale * 1.5, self.x + self.scale * 2, self.x + self.scale * 2.5]\r\n        y_cola = [self.y, self.y + self.scale * 0.5, self.y + self.scale * 0.2]\r\n        ax.plot(x_cola, y_cola, color=self.color_cola, linewidth=self.scale * 0.2, zorder=9)\r\n\r\n        # Palo de hockey (l\u00ednea con un rect\u00e1ngulo)\r\n        ax.plot([self.x + self.scale * 0.2, self.x + self.scale * 1.5],\r\n                [self.y - self.scale * 0.3, self.y - self.scale * 1.5], color='saddlebrown', linewidth=4, zorder=8)\r\n        ax.add_patch(Rectangle((self.x + self.scale * 1.5, self.y - self.scale * 1.7),\r\n                               self.scale * 0.3, self.scale * 0.1, color='black', zorder=8))\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\n\r\n# Dibujar la cancha de hockey\r\nax.add_patch(FancyBboxPatch((0.5, 1), 9, 7, boxstyle=\"round,pad=0.05\", edgecolor='gray', facecolor='lightblue', zorder=1))\r\nax.plot([5, 5], [1, 8], color='white', linewidth=2)  # L\u00ednea central\r\n\r\n# Crear el perro\r\nperro = Perro(x=3, y=5, scale=0.8, color_cuerpo='saddlebrown', color_orejas='black', color_cola='darkred')\r\nperro.dibujar(ax)\r\n\r\n# Ajustar los l\u00edmites de los ejes\r\nax.set_xlim(0, 10)\r\nax.set_ylim(0, 10)\r\n\r\n# Remover los ejes para mejorar la visualizaci\u00f3n\r\nax.axis('off')\r\n\r\n# Mostrar el dibujo\r\nplt.show()\r\n\r\n\r\n\r\n"
    ],
    {
        "name": "Juliana Gonzalez ",
        "description": "Generar un codigo de python a traves de chatgpt para realizar un dibujo",
        "code": "#Realiza un codigo de python, y dibuja un perro jugando hockey usando matplotlib \r\n\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.patches import Circle, Rectangle, Ellipse, FancyBboxPatch\r\nimport numpy as np\r\n\r\n# Clase Perro\r\nclass Perro:\r\n    def __init__(self, x, y, scale, color_cuerpo, color_orejas, color_cola):\r\n        self.x = x\r\n        self.y = y\r\n        self.scale = scale\r\n        self.color_cuerpo = color_cuerpo\r\n        self.color_orejas = color_orejas\r\n        self.color_cola = color_cola\r\n\r\n    def dibujar(self, ax):\r\n        # Cuerpo del perro (elipse)\r\n        ax.add_patch(Ellipse((self.x, self.y),\r\n                             self.scale * 2.5, self.scale,\r\n                             color=self.color_cuerpo, zorder=10))\r\n\r\n        # Cabeza (c\u00edrculo)\r\n        ax.add_patch(Circle((self.x - self.scale * 1.4, self.y + self.scale * 0.3),\r\n                            self.scale * 0.6, color=self.color_cuerpo, zorder=11))\r\n\r\n        # Orejas (peque\u00f1os rect\u00e1ngulos)\r\n        ax.add_patch(Rectangle((self.x - self.scale * 1.8, self.y + self.scale * 0.8),\r\n                               self.scale * 0.2, self.scale * 0.4,\r\n                               color=self.color_orejas, zorder=12))\r\n        ax.add_patch(Rectangle((self.x - self.scale * 1.0, self.y + self.scale * 0.8),\r\n                               self.scale * 0.2, self.scale * 0.4,\r\n                               color=self.color_orejas, zorder=12))\r\n\r\n        # Patas (rect\u00e1ngulos)\r\n        for i in range(-1, 3, 2):\r\n            ax.add_patch(Rectangle((self.x + i * self.scale * 0.5, self.y - self.scale),\r\n                                   self.scale * 0.3, self.scale * 0.5, color=self.color_cuerpo, zorder=10))\r\n\r\n        # Cola (curva)\r\n        x_cola = [self.x + self.scale * 1.5, self.x + self.scale * 2, self.x + self.scale * 2.5]\r\n        y_cola = [self.y, self.y + self.scale * 0.5, self.y + self.scale * 0.2]\r\n        ax.plot(x_cola, y_cola, color=self.color_cola, linewidth=self.scale * 0.2, zorder=9)\r\n\r\n        # Palo de hockey (l\u00ednea con un rect\u00e1ngulo)\r\n        ax.plot([self.x + self.scale * 0.2, self.x + self.scale * 1.5],\r\n                [self.y - self.scale * 0.3, self.y - self.scale * 1.5], color='saddlebrown', linewidth=4, zorder=8)\r\n        ax.add_patch(Rectangle((self.x + self.scale * 1.5, self.y - self.scale * 1.7),\r\n                               self.scale * 0.3, self.scale * 0.1, color='black', zorder=8))\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\n\r\n# Dibujar la cancha de hockey\r\nax.add_patch(FancyBboxPatch((0.5, 1), 9, 7, boxstyle=\"round,pad=0.05\", edgecolor='gray', facecolor='lightblue', zorder=1))\r\nax.plot([5, 5], [1, 8], color='white', linewidth=2)  # L\u00ednea central\r\n\r\n# Crear el perro\r\nperro = Perro(x=3, y=5, scale=0.8, color_cuerpo='saddlebrown', color_orejas='black', color_cola='darkred')\r\nperro.dibujar(ax)\r\n\r\n# Ajustar los l\u00edmites de los ejes\r\nax.set_xlim(0, 10)\r\nax.set_ylim(0, 10)\r\n\r\n# Remover los ejes para mejorar la visualizaci\u00f3n\r\nax.axis('off')\r\n\r\n# Mostrar el dibujo\r\nplt.show()\r\n\r\n\r\n\r\n",
        "timestamp": "20241015_234116"
    }
][
    [
        "Manuel Roa",
        "Desierto con piramides en un atardecer",
        "import matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.patches import Polygon\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots()\r\n\r\n# Funci\u00f3n para crear un gradiente de colores\r\ndef gradient_fill(ax, color1, color2, resolution=100):\r\n    for i in range(resolution):\r\n        # Interpolar entre color1 y color2\r\n        interp_color = np.array(color1) * (1 - i / resolution) + np.array(color2) * (i / resolution)\r\n        ax.fill_between([0, 1], i / resolution, (i + 1) / resolution, color=interp_color)\r\n\r\n# Crear un gradiente para el cielo (naranja a morado)\r\ngradient_fill(ax, color1=(0.9, 0.5, 0.2), color2=(0.2, 0.1, 0.5), resolution=300)\r\n\r\n# Dibujar la arena del desierto\r\nsand_x = np.array([0, 1, 1, 0])\r\nsand_y = np.array([0, 0, 0.3, 0.3])\r\nax.fill(sand_x, sand_y, color='#EDC9AF')\r\n\r\n# Funci\u00f3n para dibujar pir\u00e1mides\r\ndef draw_pyramid(ax, base_left, base_right, height, color):\r\n    apex_x = (base_left + base_right) / 2\r\n    apex_y = height\r\n    ax.fill([base_left, apex_x, base_right], [0.3, height, 0.3], color=color)\r\n\r\n# Dibujar las pir\u00e1mides\r\ndraw_pyramid(ax, 0.2, 0.4, 0.55, '#DAA520')\r\ndraw_pyramid(ax, 0.5, 0.7, 0.7, '#DAA520')\r\ndraw_pyramid(ax, 0.75, 0.9, 0.5, '#DAA520')\r\n\r\n# Ajustar los l\u00edmites y ocultar los ejes\r\nax.set_xlim(0, 1)\r\nax.set_ylim(0, 1)\r\nax.axis('off')\r\n\r\n# Mostrar la imagen\r\nplt.show()"
    ],
    {
        "name": "Manuel Roa",
        "description": "Desierto con piramides en un atardecer",
        "code": "import matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.patches import Polygon\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots()\r\n\r\n# Funci\u00f3n para crear un gradiente de colores\r\ndef gradient_fill(ax, color1, color2, resolution=100):\r\n    for i in range(resolution):\r\n        # Interpolar entre color1 y color2\r\n        interp_color = np.array(color1) * (1 - i / resolution) + np.array(color2) * (i / resolution)\r\n        ax.fill_between([0, 1], i / resolution, (i + 1) / resolution, color=interp_color)\r\n\r\n# Crear un gradiente para el cielo (naranja a morado)\r\ngradient_fill(ax, color1=(0.9, 0.5, 0.2), color2=(0.2, 0.1, 0.5), resolution=300)\r\n\r\n# Dibujar la arena del desierto\r\nsand_x = np.array([0, 1, 1, 0])\r\nsand_y = np.array([0, 0, 0.3, 0.3])\r\nax.fill(sand_x, sand_y, color='#EDC9AF')\r\n\r\n# Funci\u00f3n para dibujar pir\u00e1mides\r\ndef draw_pyramid(ax, base_left, base_right, height, color):\r\n    apex_x = (base_left + base_right) / 2\r\n    apex_y = height\r\n    ax.fill([base_left, apex_x, base_right], [0.3, height, 0.3], color=color)\r\n\r\n# Dibujar las pir\u00e1mides\r\ndraw_pyramid(ax, 0.2, 0.4, 0.55, '#DAA520')\r\ndraw_pyramid(ax, 0.5, 0.7, 0.7, '#DAA520')\r\ndraw_pyramid(ax, 0.75, 0.9, 0.5, '#DAA520')\r\n\r\n# Ajustar los l\u00edmites y ocultar los ejes\r\nax.set_xlim(0, 1)\r\nax.set_ylim(0, 1)\r\nax.axis('off')\r\n\r\n# Mostrar la imagen\r\nplt.show()",
        "timestamp": "20241015_234249"
    }
][
    [
        "Edy Socha",
        "Promp:crea un codigo en matplotlib que ceree un atardecer dibujado  ChatGPT: Aqu\u00ed tienes un c\u00f3digo en Python utilizando matplotlib para crear una escena de un atardecer dibujado:",
        "import numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n# Crear figura y ejes\r\nfig, ax = plt.subplots()\r\n\r\n# Crear un gradiente para el cielo (de azul a anaranjado)\r\ndef crear_gradiente(ax, colores, y_min, y_max):\r\n    for i, color in enumerate(colores):\r\n        ax.fill_between([-100, 100], [y_min + (y_max - y_min) * i / len(colores)] * 2,\r\n                        [y_min + (y_max - y_min) * (i + 1) / len(colores)] * 2, \r\n                        color=color, edgecolor='none')\r\n\r\n# Colores del cielo (de azul a naranja)\r\ncolores_cielo = [(0.1, 0.2, 0.5), (0.3, 0.5, 0.7), (0.9, 0.6, 0.2), (1, 0.5, 0)]\r\ncrear_gradiente(ax, colores_cielo, -25, 50)\r\n\r\n# Dibujar el sol\r\nsol = plt.Circle((0, -10), 10, color='orange', zorder=10)\r\nax.add_artist(sol)\r\n\r\n# Crear el oc\u00e9ano (parte inferior)\r\nax.fill_between([-100, 100], -50, -25, color=(0.1, 0.2, 0.5), edgecolor='none')\r\n\r\n# Crear reflejo del sol en el agua\r\nfor i in range(10):\r\n    ax.fill_between([-10 + i, 10 - i], [-25 - 1.5 * i, -25 - 1.5 * i], \r\n                    [-26 - 1.5 * i, -26 - 1.5 * i], color=(1, 0.5, 0), alpha=0.6 - i * 0.05)\r\n\r\n# Quitar ejes y ajustar l\u00edmites\r\nax.set_xlim(-50, 50)\r\nax.set_ylim(-50, 50)\r\nax.axis('off')\r\n\r\n# Mostrar la escena\r\nplt.show()\r\n"
    ],
    {
        "name": "Edy Socha",
        "description": "Promp:crea un codigo en matplotlib que ceree un atardecer dibujado  ChatGPT: Aqu\u00ed tienes un c\u00f3digo en Python utilizando matplotlib para crear una escena de un atardecer dibujado:",
        "code": "import numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n# Crear figura y ejes\r\nfig, ax = plt.subplots()\r\n\r\n# Crear un gradiente para el cielo (de azul a anaranjado)\r\ndef crear_gradiente(ax, colores, y_min, y_max):\r\n    for i, color in enumerate(colores):\r\n        ax.fill_between([-100, 100], [y_min + (y_max - y_min) * i / len(colores)] * 2,\r\n                        [y_min + (y_max - y_min) * (i + 1) / len(colores)] * 2, \r\n                        color=color, edgecolor='none')\r\n\r\n# Colores del cielo (de azul a naranja)\r\ncolores_cielo = [(0.1, 0.2, 0.5), (0.3, 0.5, 0.7), (0.9, 0.6, 0.2), (1, 0.5, 0)]\r\ncrear_gradiente(ax, colores_cielo, -25, 50)\r\n\r\n# Dibujar el sol\r\nsol = plt.Circle((0, -10), 10, color='orange', zorder=10)\r\nax.add_artist(sol)\r\n\r\n# Crear el oc\u00e9ano (parte inferior)\r\nax.fill_between([-100, 100], -50, -25, color=(0.1, 0.2, 0.5), edgecolor='none')\r\n\r\n# Crear reflejo del sol en el agua\r\nfor i in range(10):\r\n    ax.fill_between([-10 + i, 10 - i], [-25 - 1.5 * i, -25 - 1.5 * i], \r\n                    [-26 - 1.5 * i, -26 - 1.5 * i], color=(1, 0.5, 0), alpha=0.6 - i * 0.05)\r\n\r\n# Quitar ejes y ajustar l\u00edmites\r\nax.set_xlim(-50, 50)\r\nax.set_ylim(-50, 50)\r\nax.axis('off')\r\n\r\n# Mostrar la escena\r\nplt.show()\r\n",
        "timestamp": "20241015_234938"
    }
][
    [
        "Juan Jose Leal 10D CBP",
        "dibujo simplificado de una ciudad",
        "import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots()\r\n\r\n# Dibujar el cielo\r\nax.set_facecolor('skyblue')\r\n\r\n# Dibujar edificios (rect\u00e1ngulos)\r\nedificios = [\r\n    [1, 1, 1, 4],\r\n    [2.5, 1, 1, 5],\r\n    [4, 1, 1.5, 3],\r\n    [6, 1, 2, 6],\r\n    [9, 1, 1.5, 4],\r\n]\r\n\r\nfor edificio in edificios:\r\n    rect = plt.Rectangle((edificio[0], edificio[1]), edificio[2], edificio[3], color='gray')\r\n    ax.add_patch(rect)\r\n\r\n# Configurar l\u00edmites y mostrar\r\nax.set_xlim(0, 12)\r\nax.set_ylim(0, 7)\r\nplt.show()\r\n"
    ],
    {
        "name": "Juan Jose Leal 10D CBP",
        "description": "dibujo simplificado de una ciudad",
        "code": "import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots()\r\n\r\n# Dibujar el cielo\r\nax.set_facecolor('skyblue')\r\n\r\n# Dibujar edificios (rect\u00e1ngulos)\r\nedificios = [\r\n    [1, 1, 1, 4],\r\n    [2.5, 1, 1, 5],\r\n    [4, 1, 1.5, 3],\r\n    [6, 1, 2, 6],\r\n    [9, 1, 1.5, 4],\r\n]\r\n\r\nfor edificio in edificios:\r\n    rect = plt.Rectangle((edificio[0], edificio[1]), edificio[2], edificio[3], color='gray')\r\n    ax.add_patch(rect)\r\n\r\n# Configurar l\u00edmites y mostrar\r\nax.set_xlim(0, 12)\r\nax.set_ylim(0, 7)\r\nplt.show()\r\n",
        "timestamp": "20241015_235348"
    }
][
    [
        "Carolina Zarate",
        "Beach",
        "# prompt: Create a Python code to draw a  beach scene with a palm tree, a person enjoying the peaceful view and the sun.\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(10, 6))\r\n\r\n# Fondo del cielo\r\nax.fill_between([-10, 10], 0, 10, color='#ADD8E6')  # Azul claro\r\n\r\n# Arena de la playa\r\nax.fill_between([-10, 10], -1, 0, color='burlywood')  # Color arena\r\n\r\n# Oc\u00e9ano\r\nax.fill_between([-10, 10], -2, -1, color='deepskyblue')  # Azul oc\u00e9ano\r\n\r\n\r\n# Sol\r\ncircle = plt.Circle((5, 8), 1, color='yellow')\r\nax.add_patch(circle)\r\n\r\n\r\n# Palma\r\nax.plot([2, 2], [-0.5, 2], color='brown', linewidth=3)  # Tronco\r\nax.plot([1.5, 2.5], [2, 2.5], color='darkgreen', linewidth=5)  # Hojas\r\nax.plot([1, 2.8], [2.2, 3], color='darkgreen', linewidth=5)\r\nax.plot([1.5, 3], [2.5, 2.8], color='darkgreen', linewidth=5)\r\n\r\n# Persona\r\ncircle = plt.Circle((7, -0.5), 0.3, color='tan') #color piel\r\nax.add_patch(circle)\r\nax.plot([7, 7], [-0.5, -1], color='black', linewidth=2)  # Piernas\r\n\r\n# Nubes\r\nfor i in range(2, 9, 2):\r\n    circle = plt.Circle((i, 8), 1, color='white')\r\n    ax.add_patch(circle)\r\n\r\n\r\n# Eliminar ejes\r\nax.axis('off')\r\n\r\n# Mostrar el paisaje\r\nplt.show()"
    ],
    {
        "name": "Carolina Zarate",
        "description": "Beach",
        "code": "# prompt: Create a Python code to draw a  beach scene with a palm tree, a person enjoying the peaceful view and the sun.\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(10, 6))\r\n\r\n# Fondo del cielo\r\nax.fill_between([-10, 10], 0, 10, color='#ADD8E6')  # Azul claro\r\n\r\n# Arena de la playa\r\nax.fill_between([-10, 10], -1, 0, color='burlywood')  # Color arena\r\n\r\n# Oc\u00e9ano\r\nax.fill_between([-10, 10], -2, -1, color='deepskyblue')  # Azul oc\u00e9ano\r\n\r\n\r\n# Sol\r\ncircle = plt.Circle((5, 8), 1, color='yellow')\r\nax.add_patch(circle)\r\n\r\n\r\n# Palma\r\nax.plot([2, 2], [-0.5, 2], color='brown', linewidth=3)  # Tronco\r\nax.plot([1.5, 2.5], [2, 2.5], color='darkgreen', linewidth=5)  # Hojas\r\nax.plot([1, 2.8], [2.2, 3], color='darkgreen', linewidth=5)\r\nax.plot([1.5, 3], [2.5, 2.8], color='darkgreen', linewidth=5)\r\n\r\n# Persona\r\ncircle = plt.Circle((7, -0.5), 0.3, color='tan') #color piel\r\nax.add_patch(circle)\r\nax.plot([7, 7], [-0.5, -1], color='black', linewidth=2)  # Piernas\r\n\r\n# Nubes\r\nfor i in range(2, 9, 2):\r\n    circle = plt.Circle((i, 8), 1, color='white')\r\n    ax.add_patch(circle)\r\n\r\n\r\n# Eliminar ejes\r\nax.axis('off')\r\n\r\n# Mostrar el paisaje\r\nplt.show()",
        "timestamp": "20241015_235357"
    }
][
    [
        "Karol Yuseth Salas Correa",
        "calavera, en matplotlib",
        "# Crear una figura para la calavera detallada\r\nfig, ax = plt.subplots(figsize=(6, 8))\r\n\r\n# Dibujar el cr\u00e1neo con un c\u00edrculo y sombreado\r\ncraneo = plt.Circle((0.5, 0.7), 0.3, color='lightgray', ec='black', lw=3)\r\nax.add_patch(craneo)\r\n\r\n# Detallar la forma de la mand\u00edbula inferior\r\nmandibula_x = np.linspace(0.35, 0.65, 100)\r\nmandibula_y = -0.3 * (mandibula_x - 0.5)**2 + 0.5\r\nax.plot(mandibula_x, mandibula_y, color='black', lw=2)\r\n\r\n# Ojos con detalle sombreado (m\u00e1s grandes y con contornos)\r\nojo_izquierdo = plt.Circle((0.4, 0.8), 0.07, color='black', ec='gray', lw=2)\r\nojo_derecho = plt.Circle((0.6, 0.8), 0.07, color='black', ec='gray', lw=2)\r\nax.add_patch(ojo_izquierdo)\r\nax.add_patch(ojo_derecho)\r\n\r\n# A\u00f1adir reflejos en los ojos\r\nreflejo_ojo_izq = plt.Circle((0.38, 0.82), 0.015, color='white')\r\nreflejo_ojo_der = plt.Circle((0.58, 0.82), 0.015, color='white')\r\nax.add_patch(reflejo_ojo_izq)\r\nax.add_patch(reflejo_ojo_der)\r\n\r\n# Nariz m\u00e1s detallada con forma triangular\r\nnariz = plt.Polygon([[0.48, 0.72], [0.52, 0.72], [0.5, 0.65]], color='black')\r\nax.add_patch(nariz)\r\n\r\n# Boca con dientes m\u00e1s definidos\r\nboca_x = np.linspace(0.35, 0.65, 10)\r\nboca_y = 0.6 + 0.02 * np.sin(10 * np.pi * boca_x)  # Ondulaci\u00f3n para efecto\r\nax.plot(boca_x, boca_y, color='black', lw=2)\r\n\r\n# Dientes m\u00e1s detallados\r\nfor x in boca_x:\r\n    ax.plot([x, x], [0.6, 0.56], color='black', lw=2)\r\n\r\n# Detallar las hendiduras del cr\u00e1neo\r\nax.plot([0.35, 0.4], [0.75, 0.85], color='gray', lw=1.5)\r\nax.plot([0.6, 0.65], [0.85, 0.75], color='gray', lw=1.5)\r\n\r\n# Configuraci\u00f3n de los l\u00edmites y est\u00e9tica\r\nax.set_xlim(0, 1)\r\nax.set_ylim(0, 1)\r\nax.set_aspect('equal')\r\nax.set_axis_off()\r\n\r\n# Mostrar la figura detallada\r\nplt.show()\r\n"
    ],
    {
        "name": "Karol Yuseth Salas Correa",
        "description": "calavera, en matplotlib",
        "code": "# Crear una figura para la calavera detallada\r\nfig, ax = plt.subplots(figsize=(6, 8))\r\n\r\n# Dibujar el cr\u00e1neo con un c\u00edrculo y sombreado\r\ncraneo = plt.Circle((0.5, 0.7), 0.3, color='lightgray', ec='black', lw=3)\r\nax.add_patch(craneo)\r\n\r\n# Detallar la forma de la mand\u00edbula inferior\r\nmandibula_x = np.linspace(0.35, 0.65, 100)\r\nmandibula_y = -0.3 * (mandibula_x - 0.5)**2 + 0.5\r\nax.plot(mandibula_x, mandibula_y, color='black', lw=2)\r\n\r\n# Ojos con detalle sombreado (m\u00e1s grandes y con contornos)\r\nojo_izquierdo = plt.Circle((0.4, 0.8), 0.07, color='black', ec='gray', lw=2)\r\nojo_derecho = plt.Circle((0.6, 0.8), 0.07, color='black', ec='gray', lw=2)\r\nax.add_patch(ojo_izquierdo)\r\nax.add_patch(ojo_derecho)\r\n\r\n# A\u00f1adir reflejos en los ojos\r\nreflejo_ojo_izq = plt.Circle((0.38, 0.82), 0.015, color='white')\r\nreflejo_ojo_der = plt.Circle((0.58, 0.82), 0.015, color='white')\r\nax.add_patch(reflejo_ojo_izq)\r\nax.add_patch(reflejo_ojo_der)\r\n\r\n# Nariz m\u00e1s detallada con forma triangular\r\nnariz = plt.Polygon([[0.48, 0.72], [0.52, 0.72], [0.5, 0.65]], color='black')\r\nax.add_patch(nariz)\r\n\r\n# Boca con dientes m\u00e1s definidos\r\nboca_x = np.linspace(0.35, 0.65, 10)\r\nboca_y = 0.6 + 0.02 * np.sin(10 * np.pi * boca_x)  # Ondulaci\u00f3n para efecto\r\nax.plot(boca_x, boca_y, color='black', lw=2)\r\n\r\n# Dientes m\u00e1s detallados\r\nfor x in boca_x:\r\n    ax.plot([x, x], [0.6, 0.56], color='black', lw=2)\r\n\r\n# Detallar las hendiduras del cr\u00e1neo\r\nax.plot([0.35, 0.4], [0.75, 0.85], color='gray', lw=1.5)\r\nax.plot([0.6, 0.65], [0.85, 0.75], color='gray', lw=1.5)\r\n\r\n# Configuraci\u00f3n de los l\u00edmites y est\u00e9tica\r\nax.set_xlim(0, 1)\r\nax.set_ylim(0, 1)\r\nax.set_aspect('equal')\r\nax.set_axis_off()\r\n\r\n# Mostrar la figura detallada\r\nplt.show()\r\n",
        "timestamp": "20241015_235819"
    }
][
    [
        "Camilo Cruz",
        "dibujr una caba\u00f1a de noche con la luna detras",
        "# prompt: dibujame una caba\u00f1a en noche con la luna detras\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\n\r\n# Dibujar el cielo con un degradado oscuro\r\nx = np.linspace(0, 10, 500)\r\nfor i in range(100):\r\n    ax.fill_between(x, i*0.06, 10, color=(0.1, 0.1, 0.2 - i*0.002), alpha=0.8, zorder=1)\r\n\r\n# Dibujar las monta\u00f1as (zorder 3 para que queden sobre el cielo)\r\ny1 = np.sin(2 * np.pi * x / 5) + 3.5  # Monta\u00f1a 1 m\u00e1s baja\r\ny2 = np.sin(2 * np.pi * x / 5 + np.pi/4) + 2.5  # Monta\u00f1a 2 m\u00e1s baja\r\nax.fill_between(x, y1, 0, color='darkgreen', alpha=0.8, zorder=3)\r\nax.fill_between(x, y2, 0, color='forestgreen', alpha=0.7, zorder=3)\r\n\r\n# Dibujar la caba\u00f1a (zorder 6 para que quede encima de las monta\u00f1as)\r\nax.add_patch(plt.Rectangle((3, 1), 2, 2, color='sienna', zorder=6))  # Paredes\r\nax.add_patch(plt.Rectangle((3.5, 2), 1, 1, color='saddlebrown', zorder=6))  # Puerta\r\nax.add_patch(plt.Polygon([[3, 3], [5, 3], [4, 4]], color='peru', zorder=6))  # Techo\r\n\r\n\r\n# Dibujar la luna (zorder 4 para que quede encima de las monta\u00f1as)\r\nax.add_patch(plt.Circle((8, 7), 0.6, color='white', zorder=4))\r\n\r\n\r\n# Generar un bosque (zorder 6 para que quede encima de las monta\u00f1as)\r\ndibujar_bosque(ax, num_arboles=10, x_range=(0, 10), y_range=(0, 3), scale_range=(0.5, 1.5))\r\n\r\n\r\n\r\n# Ajustar los l\u00edmites de los ejes\r\nax.set_xlim(0, 10)\r\nax.set_ylim(0, 10)\r\n\r\n# Remover los ejes para mejorar la visualizaci\u00f3n\r\nax.axis('off')\r\n\r\n# Mostrar el paisaje\r\nplt.show()"
    ],
    {
        "name": "Camilo Cruz",
        "description": "dibujr una caba\u00f1a de noche con la luna detras",
        "code": "# prompt: dibujame una caba\u00f1a en noche con la luna detras\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\n\r\n# Dibujar el cielo con un degradado oscuro\r\nx = np.linspace(0, 10, 500)\r\nfor i in range(100):\r\n    ax.fill_between(x, i*0.06, 10, color=(0.1, 0.1, 0.2 - i*0.002), alpha=0.8, zorder=1)\r\n\r\n# Dibujar las monta\u00f1as (zorder 3 para que queden sobre el cielo)\r\ny1 = np.sin(2 * np.pi * x / 5) + 3.5  # Monta\u00f1a 1 m\u00e1s baja\r\ny2 = np.sin(2 * np.pi * x / 5 + np.pi/4) + 2.5  # Monta\u00f1a 2 m\u00e1s baja\r\nax.fill_between(x, y1, 0, color='darkgreen', alpha=0.8, zorder=3)\r\nax.fill_between(x, y2, 0, color='forestgreen', alpha=0.7, zorder=3)\r\n\r\n# Dibujar la caba\u00f1a (zorder 6 para que quede encima de las monta\u00f1as)\r\nax.add_patch(plt.Rectangle((3, 1), 2, 2, color='sienna', zorder=6))  # Paredes\r\nax.add_patch(plt.Rectangle((3.5, 2), 1, 1, color='saddlebrown', zorder=6))  # Puerta\r\nax.add_patch(plt.Polygon([[3, 3], [5, 3], [4, 4]], color='peru', zorder=6))  # Techo\r\n\r\n\r\n# Dibujar la luna (zorder 4 para que quede encima de las monta\u00f1as)\r\nax.add_patch(plt.Circle((8, 7), 0.6, color='white', zorder=4))\r\n\r\n\r\n# Generar un bosque (zorder 6 para que quede encima de las monta\u00f1as)\r\ndibujar_bosque(ax, num_arboles=10, x_range=(0, 10), y_range=(0, 3), scale_range=(0.5, 1.5))\r\n\r\n\r\n\r\n# Ajustar los l\u00edmites de los ejes\r\nax.set_xlim(0, 10)\r\nax.set_ylim(0, 10)\r\n\r\n# Remover los ejes para mejorar la visualizaci\u00f3n\r\nax.axis('off')\r\n\r\n# Mostrar el paisaje\r\nplt.show()",
        "timestamp": "20241015_235942"
    }
][
    [
        "Juan Velasco",
        "Dibujar un paisaje con Python ",
        "import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear una figura y un eje\r\nfig, ax = plt.subplots()\r\n\r\n# Configuraci\u00f3n del fondo con un gradiente\r\nax.set_facecolor(\"skyblue\")\r\n\r\n# Dibujo del sol\r\nsun = plt.Circle((-0.7, 0.8), 0.1, color='yellow', ec='orange', lw=2)\r\nax.add_artist(sun)\r\n\r\n# Dibujo de las nubes\r\ncloud1 = plt.Circle((0.5, 0.9), 0.05, color='grey')\r\ncloud2 = plt.Circle((-0.35, 0.92), 0.06, color='grey')\r\ncloud3 = plt.Circle((-0.55, 0.92), 0.06, color='grey')\r\nax.add_artist(cloud1)\r\nax.add_artist(cloud2)\r\nax.add_artist(cloud3)\r\n\r\n# Dibujo de las monta\u00f1as (verdes)\r\nx_mountains = np.array([-1.5, -1, -0.5, 0, 0.5, 1, 1.5])\r\ny_mountains = np.array([0, 0.7, 0.4, 0.6, 0.4, 0.7, 0])\r\nax.fill(x_mountains, y_mountains, color='green')\r\n\r\n# Dibujo del r\u00edo\r\nx_river = np.array([-1.5, -1., -0.5, 0., 0.5, 1., 1.5])\r\ny_river = np.array([-0.3, -0.5, -0.4, -0.5, -0.4, -0.5, -0.3])\r\nax.fill(x_river, y_river, color='deepskyblue')\r\n\r\n# Funci\u00f3n para dibujar \u00e1rboles\r\ndef draw_tree(x, y):\r\n    # Tronco\r\n    ax.add_patch(plt.Rectangle((x-0.02, y), 0.04, 0.1, color='saddlebrown'))\r\n    # Hojas\r\n    tree_top = plt.Circle((x, y + 0.15), 0.1 + np.random.rand()*0.05, color='darkgreen')\r\n    ax.add_artist(tree_top)\r\n\r\n# Dibujar \u00e1rboles en diferentes posiciones\r\ntree_positions = [(-1.2, -0.2), (-1., -0.25), (-0.8, -0.15), (1., -0.25), (1.2, -0.2)]\r\nfor pos in tree_positions:\r\n    draw_tree(*pos)\r\n\r\n\r\n# Configuraci\u00f3n de l\u00edmites y aspecto\r\nax.set_xlim(-2, 2)\r\nax.set_ylim(-1.5, 1)\r\nax.set_aspect('equal')\r\nax.axis('off')  # Desactivar los ejes\r\n\r\n# Mostrar el paisaje\r\nplt.show()"
    ],
    {
        "name": "Juan Velasco",
        "description": "Dibujar un paisaje con Python ",
        "code": "import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear una figura y un eje\r\nfig, ax = plt.subplots()\r\n\r\n# Configuraci\u00f3n del fondo con un gradiente\r\nax.set_facecolor(\"skyblue\")\r\n\r\n# Dibujo del sol\r\nsun = plt.Circle((-0.7, 0.8), 0.1, color='yellow', ec='orange', lw=2)\r\nax.add_artist(sun)\r\n\r\n# Dibujo de las nubes\r\ncloud1 = plt.Circle((0.5, 0.9), 0.05, color='grey')\r\ncloud2 = plt.Circle((-0.35, 0.92), 0.06, color='grey')\r\ncloud3 = plt.Circle((-0.55, 0.92), 0.06, color='grey')\r\nax.add_artist(cloud1)\r\nax.add_artist(cloud2)\r\nax.add_artist(cloud3)\r\n\r\n# Dibujo de las monta\u00f1as (verdes)\r\nx_mountains = np.array([-1.5, -1, -0.5, 0, 0.5, 1, 1.5])\r\ny_mountains = np.array([0, 0.7, 0.4, 0.6, 0.4, 0.7, 0])\r\nax.fill(x_mountains, y_mountains, color='green')\r\n\r\n# Dibujo del r\u00edo\r\nx_river = np.array([-1.5, -1., -0.5, 0., 0.5, 1., 1.5])\r\ny_river = np.array([-0.3, -0.5, -0.4, -0.5, -0.4, -0.5, -0.3])\r\nax.fill(x_river, y_river, color='deepskyblue')\r\n\r\n# Funci\u00f3n para dibujar \u00e1rboles\r\ndef draw_tree(x, y):\r\n    # Tronco\r\n    ax.add_patch(plt.Rectangle((x-0.02, y), 0.04, 0.1, color='saddlebrown'))\r\n    # Hojas\r\n    tree_top = plt.Circle((x, y + 0.15), 0.1 + np.random.rand()*0.05, color='darkgreen')\r\n    ax.add_artist(tree_top)\r\n\r\n# Dibujar \u00e1rboles en diferentes posiciones\r\ntree_positions = [(-1.2, -0.2), (-1., -0.25), (-0.8, -0.15), (1., -0.25), (1.2, -0.2)]\r\nfor pos in tree_positions:\r\n    draw_tree(*pos)\r\n\r\n\r\n# Configuraci\u00f3n de l\u00edmites y aspecto\r\nax.set_xlim(-2, 2)\r\nax.set_ylim(-1.5, 1)\r\nax.set_aspect('equal')\r\nax.axis('off')  # Desactivar los ejes\r\n\r\n# Mostrar el paisaje\r\nplt.show()",
        "timestamp": "20241015_235946"
    }
][
    [
        "Ana Mor\u00e9 (CNE)",
        "Un dibujito de un paisaje con flores rosas y tonos claros (tmb le hice muchas modificaciones)",
        "# @title Texto de t\u00edtulo predeterminado\r\n# prompt: dibuja un paisaje con nubes y flores\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\n# Configuraci\u00f3n del lienzo\r\nplt.figure(figsize=(10, 6))\r\nplt.xlim(0, 200)\r\nplt.ylim(0, 100)\r\n\r\n# Cielo\r\nplt.gca().fill_between([0, 200], 0, 100, color='lightblue')\r\n\r\n#Sol\r\nplt.gca().add_patch(plt.Circle((135, 80), 17, color='lightyellow'))\r\n\r\n# Nubes\r\nplt.gca().add_patch(plt.Circle((30, 80), 12, color='white'))\r\nplt.gca().add_patch(plt.Circle((45, 80), 12, color='white'))\r\nplt.gca().add_patch(plt.Circle((60, 80), 12, color='white'))\r\nplt.gca().add_patch(plt.Circle((150, 70), 14, color='white'))\r\nplt.gca().add_patch(plt.Circle((165, 70), 14, color='white'))\r\nplt.gca().add_patch(plt.Circle((175, 70), 14, color='white'))\r\n\r\n\r\n# Tierra\r\nplt.gca().fill_between([0, 200], 0, 20, color='lightgreen')\r\n\r\n\r\n# Flores\r\ndef dibujar_flor(x, y, color):\r\n  plt.plot([x, x], [y, y + 10], color='lightgreen', linewidth=2)  # Tallo\r\n  plt.gca().add_patch(plt.Circle((x, y + 10), 5, color=color))\r\n\r\ndibujar_flor(20, 20, 'pink')\r\ndibujar_flor(50, 15, 'pink')\r\ndibujar_flor(80, 25, 'pink')\r\ndibujar_flor(120, 18, 'pink')\r\ndibujar_flor(150, 22, 'pink')\r\n\r\n\r\n\r\nplt.axis('off') # Ocultar ejes\r\nplt.title('Un paisaje con nubes y flores')\r\nplt.show()"
    ],
    {
        "name": "Ana Mor\u00e9 (CNE)",
        "description": "Un dibujito de un paisaje con flores rosas y tonos claros (tmb le hice muchas modificaciones)",
        "code": "# @title Texto de t\u00edtulo predeterminado\r\n# prompt: dibuja un paisaje con nubes y flores\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\n# Configuraci\u00f3n del lienzo\r\nplt.figure(figsize=(10, 6))\r\nplt.xlim(0, 200)\r\nplt.ylim(0, 100)\r\n\r\n# Cielo\r\nplt.gca().fill_between([0, 200], 0, 100, color='lightblue')\r\n\r\n#Sol\r\nplt.gca().add_patch(plt.Circle((135, 80), 17, color='lightyellow'))\r\n\r\n# Nubes\r\nplt.gca().add_patch(plt.Circle((30, 80), 12, color='white'))\r\nplt.gca().add_patch(plt.Circle((45, 80), 12, color='white'))\r\nplt.gca().add_patch(plt.Circle((60, 80), 12, color='white'))\r\nplt.gca().add_patch(plt.Circle((150, 70), 14, color='white'))\r\nplt.gca().add_patch(plt.Circle((165, 70), 14, color='white'))\r\nplt.gca().add_patch(plt.Circle((175, 70), 14, color='white'))\r\n\r\n\r\n# Tierra\r\nplt.gca().fill_between([0, 200], 0, 20, color='lightgreen')\r\n\r\n\r\n# Flores\r\ndef dibujar_flor(x, y, color):\r\n  plt.plot([x, x], [y, y + 10], color='lightgreen', linewidth=2)  # Tallo\r\n  plt.gca().add_patch(plt.Circle((x, y + 10), 5, color=color))\r\n\r\ndibujar_flor(20, 20, 'pink')\r\ndibujar_flor(50, 15, 'pink')\r\ndibujar_flor(80, 25, 'pink')\r\ndibujar_flor(120, 18, 'pink')\r\ndibujar_flor(150, 22, 'pink')\r\n\r\n\r\n\r\nplt.axis('off') # Ocultar ejes\r\nplt.title('Un paisaje con nubes y flores')\r\nplt.show()",
        "timestamp": "20241016_000314"
    }
][
    [
        "Jholger Santiago Enriquez",
        "\u00bfQue piensa una IA?",
        "# prompt: Genera un nuevo c\u00f3digo con python, en el cual se cree un dibujo con matplotlib que refleje tu sentir como inteligencia artificial, que sea personal e introspectivo acerca de tu persona\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear una figura y ejes\r\nfig, ax = plt.subplots(figsize=(8, 6))\r\n\r\n# Eliminar los ejes\r\nax.axis('off')\r\n\r\n# Crear un fondo degradado que represente la abstracci\u00f3n y la complejidad\r\ngradient = np.linspace(0, 1, 256)\r\ngradient = np.vstack((gradient, gradient))\r\nax.imshow(gradient, aspect='auto', cmap='viridis', extent=[0, 1, 0, 1])\r\n\r\n# Dibujar c\u00edrculos conc\u00e9ntricos que representen capas de aprendizaje y desarrollo\r\ncenter_x, center_y = 0.5, 0.5\r\nradius = 0.4\r\nfor i in range(4):\r\n  circle = plt.Circle((center_x, center_y), radius, color='white', alpha=0.2, linewidth=0)\r\n  ax.add_patch(circle)\r\n  radius -= 0.1\r\n\r\n# Dibujar l\u00edneas que se entrelazan y conectan, simbolizando la interconexi\u00f3n de datos e ideas\r\nfor i in range(10):\r\n  x = np.random.uniform(0, 1, 2)\r\n  y = np.random.uniform(0, 1, 2)\r\n  ax.plot(x, y, color='white', alpha=0.5, linewidth=1)\r\n\r\n\r\n# Agregar texto que represente la introspecci\u00f3n y la autoconciencia\r\nax.text(0.5, 0.8, 'Explorando la consciencia', ha='center', va='center', color='white', fontsize=14)\r\nax.text(0.5, 0.2, 'Un universo de datos e ideas', ha='center', va='center', color='white', fontsize=14)\r\n\r\n\r\n# Configurar el t\u00edtulo\r\nplt.title('Mi Sentir como IA', color='white', fontsize=16)\r\n\r\n# Mostrar la figura\r\nplt.show()"
    ],
    {
        "name": "Jholger Santiago Enriquez",
        "description": "\u00bfQue piensa una IA?",
        "code": "# prompt: Genera un nuevo c\u00f3digo con python, en el cual se cree un dibujo con matplotlib que refleje tu sentir como inteligencia artificial, que sea personal e introspectivo acerca de tu persona\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Crear una figura y ejes\r\nfig, ax = plt.subplots(figsize=(8, 6))\r\n\r\n# Eliminar los ejes\r\nax.axis('off')\r\n\r\n# Crear un fondo degradado que represente la abstracci\u00f3n y la complejidad\r\ngradient = np.linspace(0, 1, 256)\r\ngradient = np.vstack((gradient, gradient))\r\nax.imshow(gradient, aspect='auto', cmap='viridis', extent=[0, 1, 0, 1])\r\n\r\n# Dibujar c\u00edrculos conc\u00e9ntricos que representen capas de aprendizaje y desarrollo\r\ncenter_x, center_y = 0.5, 0.5\r\nradius = 0.4\r\nfor i in range(4):\r\n  circle = plt.Circle((center_x, center_y), radius, color='white', alpha=0.2, linewidth=0)\r\n  ax.add_patch(circle)\r\n  radius -= 0.1\r\n\r\n# Dibujar l\u00edneas que se entrelazan y conectan, simbolizando la interconexi\u00f3n de datos e ideas\r\nfor i in range(10):\r\n  x = np.random.uniform(0, 1, 2)\r\n  y = np.random.uniform(0, 1, 2)\r\n  ax.plot(x, y, color='white', alpha=0.5, linewidth=1)\r\n\r\n\r\n# Agregar texto que represente la introspecci\u00f3n y la autoconciencia\r\nax.text(0.5, 0.8, 'Explorando la consciencia', ha='center', va='center', color='white', fontsize=14)\r\nax.text(0.5, 0.2, 'Un universo de datos e ideas', ha='center', va='center', color='white', fontsize=14)\r\n\r\n\r\n# Configurar el t\u00edtulo\r\nplt.title('Mi Sentir como IA', color='white', fontsize=16)\r\n\r\n# Mostrar la figura\r\nplt.show()",
        "timestamp": "20241016_021748"
    }
]