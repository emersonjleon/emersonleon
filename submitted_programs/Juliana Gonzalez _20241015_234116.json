{
    "name": "Juliana Gonzalez ",
    "description": "Generar un codigo de python a traves de chatgpt para realizar un dibujo",
    "code": "#Realiza un codigo de python, y dibuja un perro jugando hockey usando matplotlib \r\n\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.patches import Circle, Rectangle, Ellipse, FancyBboxPatch\r\nimport numpy as np\r\n\r\n# Clase Perro\r\nclass Perro:\r\n    def __init__(self, x, y, scale, color_cuerpo, color_orejas, color_cola):\r\n        self.x = x\r\n        self.y = y\r\n        self.scale = scale\r\n        self.color_cuerpo = color_cuerpo\r\n        self.color_orejas = color_orejas\r\n        self.color_cola = color_cola\r\n\r\n    def dibujar(self, ax):\r\n        # Cuerpo del perro (elipse)\r\n        ax.add_patch(Ellipse((self.x, self.y),\r\n                             self.scale * 2.5, self.scale,\r\n                             color=self.color_cuerpo, zorder=10))\r\n\r\n        # Cabeza (c\u00edrculo)\r\n        ax.add_patch(Circle((self.x - self.scale * 1.4, self.y + self.scale * 0.3),\r\n                            self.scale * 0.6, color=self.color_cuerpo, zorder=11))\r\n\r\n        # Orejas (peque\u00f1os rect\u00e1ngulos)\r\n        ax.add_patch(Rectangle((self.x - self.scale * 1.8, self.y + self.scale * 0.8),\r\n                               self.scale * 0.2, self.scale * 0.4,\r\n                               color=self.color_orejas, zorder=12))\r\n        ax.add_patch(Rectangle((self.x - self.scale * 1.0, self.y + self.scale * 0.8),\r\n                               self.scale * 0.2, self.scale * 0.4,\r\n                               color=self.color_orejas, zorder=12))\r\n\r\n        # Patas (rect\u00e1ngulos)\r\n        for i in range(-1, 3, 2):\r\n            ax.add_patch(Rectangle((self.x + i * self.scale * 0.5, self.y - self.scale),\r\n                                   self.scale * 0.3, self.scale * 0.5, color=self.color_cuerpo, zorder=10))\r\n\r\n        # Cola (curva)\r\n        x_cola = [self.x + self.scale * 1.5, self.x + self.scale * 2, self.x + self.scale * 2.5]\r\n        y_cola = [self.y, self.y + self.scale * 0.5, self.y + self.scale * 0.2]\r\n        ax.plot(x_cola, y_cola, color=self.color_cola, linewidth=self.scale * 0.2, zorder=9)\r\n\r\n        # Palo de hockey (l\u00ednea con un rect\u00e1ngulo)\r\n        ax.plot([self.x + self.scale * 0.2, self.x + self.scale * 1.5],\r\n                [self.y - self.scale * 0.3, self.y - self.scale * 1.5], color='saddlebrown', linewidth=4, zorder=8)\r\n        ax.add_patch(Rectangle((self.x + self.scale * 1.5, self.y - self.scale * 1.7),\r\n                               self.scale * 0.3, self.scale * 0.1, color='black', zorder=8))\r\n\r\n# Crear la figura y los ejes\r\nfig, ax = plt.subplots(figsize=(12, 8))\r\n\r\n# Dibujar la cancha de hockey\r\nax.add_patch(FancyBboxPatch((0.5, 1), 9, 7, boxstyle=\"round,pad=0.05\", edgecolor='gray', facecolor='lightblue', zorder=1))\r\nax.plot([5, 5], [1, 8], color='white', linewidth=2)  # L\u00ednea central\r\n\r\n# Crear el perro\r\nperro = Perro(x=3, y=5, scale=0.8, color_cuerpo='saddlebrown', color_orejas='black', color_cola='darkred')\r\nperro.dibujar(ax)\r\n\r\n# Ajustar los l\u00edmites de los ejes\r\nax.set_xlim(0, 10)\r\nax.set_ylim(0, 10)\r\n\r\n# Remover los ejes para mejorar la visualizaci\u00f3n\r\nax.axis('off')\r\n\r\n# Mostrar el dibujo\r\nplt.show()\r\n\r\n\r\n\r\n",
    "timestamp": "20241015_234116"
}